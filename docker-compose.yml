version: "3.9"

services:
  auth-app:
    container_name: "authorization-BE"
    build: .
#    command: ./wait_psql.sh db ./auth-app
    command: ./auth-app
    restart: always
    networks:
      - migration
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - "8008:8008"
    depends_on:
      - auth-db
    volumes:
      - .:/app
  auth-db:
    image: postgres:15-alpine
    container_name: "auth-db"
    networks:
      migration:
        aliases:
          - database
    env_file:
      - .env
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    expose:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d qtr_portal -U qtr_portal" ]
      interval: 5s
      retries: 5
    restart: always
  migrate:
    image: migrate/migrate
    networks:
      - migration
    volumes:
      - .:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://postgres:postgres@auth_db:5432/postgres?sslmode=disable", "up" ]
    links:
      - auth_db
    depends_on:
      - auth_db
  deployment-app:
    container_name: "deployment-service"
    build: .
    command: uvicorn app.main:app --host 0.0.0.0
    working_dir: /app
    ports:
      - "8088:8088"
    volumes:
      - .:/app
    depends_on:
      - deployment_db
    restart: always
  deployment-db:
    image: postgres:15-alpine
    container_name: "deployment_db"
    env_file:
      - .env
    volumes:
      - postgres_deployment_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    expose:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d qtr_portal -U qtr_portal" ]
      interval: 5s
      retries: 5
    restart: always
  main-app:
    container_name: "main-api"
    build: .
    working_dir: /app
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; uvicorn app.__main__:app --host 0.0.0.0 --reload'
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    restart: always
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
    depends_on:
      - main-db
  main-db:
    image: postgres:15-alpine
    container_name: "postgres_db"
#    env_file:
#      - ./.env
    volumes:
      - postgres_main_api_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d qtr_portal -U qtr_portal" ]
      interval: 5s
      retries: 5
    restart: always
  frontend:
    container_name: "FE"
    build: .
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    stdin_open: true
    tty: true

networks:
  migration:

volumes:
  postgres_auth_data:
  postgres_deployment_data:
  postgres_main_api_data:

